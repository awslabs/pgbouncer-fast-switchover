diff --git a/src/server.c b/src/server.c
index 08e0211..5e9bf7e 100644
--- a/src/server.c
+++ b/src/server.c
@@ -27,6 +27,43 @@
 
 #define ERRCODE_CANNOT_CONNECT_NOW "57P03"
 
+/*
+ * Returns the query data from the server. This must be freed.
+ */
+static char *query_data(PktHdr *pkt)
+{
+	uint16_t columns;
+	uint32_t length;
+	const char *data;
+	char *output;
+
+	if (!mbuf_get_uint16be(&pkt->data, &columns))
+	{
+		log_error("could not get packet column count");
+		return NULL;
+	}
+	if (!mbuf_get_uint32be(&pkt->data, &length))
+	{
+		log_error("could not get packet length");
+		return NULL;
+	}
+	if (!mbuf_get_chars(&pkt->data, length, &data))
+	{
+		log_error("could not get packet data");
+		return NULL;
+	}
+
+	output = strndup(data, length);
+	if (output == NULL) {
+		log_error("strdup: no mem in query_data");
+		return NULL;
+	}
+
+	log_debug("data from DataRow: %s, length: %d, strlen: %lu", output, length, strlen(output));
+
+	return output;
+}
+
 static bool load_parameter(PgSocket *server, PktHdr *pkt, bool startup)
 {
 	const char *key, *val;
@@ -120,6 +157,8 @@ static bool handle_server_startup(PgSocket *server, PktHdr *pkt)
 	SBuf *sbuf = &server->sbuf;
 	bool res = false;
 	const uint8_t *ckey;
+	char *data = NULL;
+	char *hostname = NULL;
 
 	if (incomplete_pkt(pkt)) {
 		disconnect_server(server, true, "partial pkt in login phase");
@@ -130,11 +169,15 @@ static bool handle_server_startup(PgSocket *server, PktHdr *pkt)
 	if (server->exec_on_connect) {
 		switch (pkt->type) {
 		case 'Z':
+		case 'D':
 		case 'S':	/* handle them below */
 			break;
 
 		case 'E':	/* log & ignore errors */
 			log_server_error("S: error while executing exec_on_query", pkt);
+			// require topology table to exist in the cluster if using
+			if (fast_switchover)
+				fatal("does the topology table exist?");
 		/* fallthrough */
 		default:	/* ignore rest */
 			sbuf_prepare_skip(sbuf, pkt->len);
@@ -148,6 +191,38 @@ static bool handle_server_startup(PgSocket *server, PktHdr *pkt)
 		disconnect_server(server, true, "unknown pkt from server");
 		break;
 
+	case 'D':       /* DataRow */
+		if (fast_switchover && server->pool->db->topology_query && server->pool->initial_writer_endpoint) {
+			data = query_data(pkt);
+			log_debug("got initial data: %s", data);
+
+			hostname = strdup(data);
+			if (hostname == NULL) {
+				log_error("strdup: no mem for hostname");
+				free(data);
+				return NULL;
+			}
+
+			if (!strtok(data, ".")) {
+				log_error("could not parse hostname from: %s", data);
+			} else {
+				PgPool *new_pool = new_pool_from_db(server->pool->db, data, hostname);
+				if (new_pool) {
+					new_pool->parent_pool = server->pool;
+					new_pool->parent_pool->global_writer = server->pool;
+					new_pool->db->topology_query = strdup(server->pool->db->topology_query);
+					launch_new_connection(new_pool, true);
+					server->pool->num_nodes++;
+				}
+			}
+
+			free(data);
+			free(hostname);
+		}
+
+		sbuf_prepare_skip(sbuf, pkt->len);
+		return true;
+		break;
 	case 'E':		/* ErrorResponse */
 		/*
 		 * If we cannot log into the server, then we drop all clients
@@ -195,8 +270,20 @@ static bool handle_server_startup(PgSocket *server, PktHdr *pkt)
 			if (!res)
 				disconnect_server(server, false, "exec_on_connect query failed");
 			break;
+		} else if (fast_switchover && server->pool->db->topology_query && server->pool->initial_writer_endpoint) {
+			server->exec_on_connect = true;
+			slog_debug(server, "server connect ok, send topology_query: %s", server->pool->db->topology_query);
+			SEND_generic(res, server, 'Q', "s", server->pool->db->topology_query);
+			if (!res)
+				disconnect_server(server, false, "exec_on_connect query failed");
+			break;
 		}
 
+		if (server->pool->db->topology_query && server->pool->initial_writer_endpoint && server->pool->num_nodes < 2) {
+			fatal("topology_query did not find at least 2 nodes to use fast switchovers in DB: '%s'. Is the topology table populated with entries?", server->pool->db->name);
+		}
+		server->pool->initial_writer_endpoint = false;
+
 		/* login ok */
 		slog_debug(server, "server login ok, start accepting queries");
 		server->ready = true;
@@ -336,6 +423,7 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 	bool async_response = false;
 	struct List *item, *tmp;
 	bool ignore_packet = false;
+	bool res = false;
 
 	Assert(!server->pool->db->admin);
 
@@ -347,6 +435,15 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 
 	/* pooling decisions will be based on this packet */
 	case 'Z':		/* ReadyForQuery */
+		/*
+		 * Discard topology data without sending to the client is finished. Resume regular
+		 * client/server communication.
+		 */
+		if (fast_switchover && server->pool->db->topology_query && server->pool->collect_datarows) {
+			server->pool->collect_datarows = false;
+			sbuf_prepare_skip(sbuf, pkt->len);
+			return true;
+		}
 
 		/* if partial pkt, wait */
 		if (!mbuf_get_char(&pkt->data, &state))
@@ -433,6 +530,13 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 		server->query_failed = true;
 		break;
 	case 'C':		/* CommandComplete */
+		/*
+		 * In the process of discarding topology data without sending to the client.
+		 */
+		if (server->pool->collect_datarows) {
+			sbuf_prepare_skip(sbuf, pkt->len);
+			return true;
+		}
 
 		/* ErrorResponse and CommandComplete show end of copy mode */
 		if (server->copy_mode) {
@@ -518,6 +622,29 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 	/* data packets, there will be more coming */
 	case 'd':		/* CopyData(F/B) */
 	case 'D':		/* DataRow */
+		/*
+		 * These are the rows returned from the topology query that are discarded.
+		 */
+		if (server->pool->collect_datarows) {
+			sbuf_prepare_skip(sbuf, pkt->len);
+			return true;
+		} else if (fast_switchover && server->pool->checking_for_new_writer && server->state != SV_TESTED) {
+			char *data = query_data(pkt);
+			if (strcmp(data, "f") == 0) {
+				log_debug("handle_server_work: connected to writer (pg_is_in_recovery is '%s'): db_name %s", data, server->pool->db->name);
+
+				if (!server->pool->parent_pool) {
+					server->pool->parent_pool = server->pool;
+				}
+				server->pool->parent_pool->global_writer = server->pool;
+				// new writer has been found, so indicate that we need to refresh the topology.
+				server->pool->refresh_topology = true;
+			} else {
+				log_debug("handle_server_work: connected to reader (pg_is_in_recovery is '%s'). db_name: %s, Must keep polling until next server.", data, server->pool->db->name);
+			}
+			server->pool->checking_for_new_writer = false;
+			free(data);
+		}
 		break;
 	}
 	server->idle_tx = idle_tx;
@@ -605,14 +732,26 @@ static bool handle_server_work(PgSocket *server, PktHdr *pkt)
 			}
 		}
 	} else {
-		if (server->state != SV_TESTED) {
+		if (server->state != SV_TESTED && !server->pool->db->topology_query)
 			slog_warning(server,
 				     "got packet '%c' from server when not linked",
 				     pkt_desc(pkt));
-		}
 		sbuf_prepare_skip(sbuf, pkt->len);
 	}
 
+	/*
+	 * pg_is_in_recovery() finished since we received a ReadyForQuery and refresh_topology is set.
+	 * Mark the pool as needing to collect data rows and send the topology query to the writer.
+	 */
+	if (server->pool->refresh_topology && pkt->type == 'Z') {
+		server->pool->collect_datarows = true;
+		server->pool->refresh_topology = false;
+
+		SEND_generic(res, server, 'Q', "s", server->pool->db->topology_query);
+		if (!res)
+			disconnect_server(server, false, "exec_on_connect query failed");
+	}
+
 	return true;
 }
 
@@ -727,6 +866,7 @@ bool server_proto(SBuf *sbuf, SBufEvent evtype, struct MBuf *data)
 	bool res = false;
 	PgSocket *server = container_of(sbuf, PgSocket, sbuf);
 	PgPool *pool = server->pool;
+	PgPool *global_writer = get_global_writer(pool);
 	PktHdr pkt;
 	char infobuf[96];
 
@@ -741,8 +881,18 @@ bool server_proto(SBuf *sbuf, SBufEvent evtype, struct MBuf *data)
 	case SBUF_EV_RECV_FAILED:
 		if (server->state == SV_ACTIVE_CANCEL)
 			disconnect_server(server, false, "successfully sent cancel request");
-		else
+		else {
+			if (global_writer)
+				clear_global_writer(pool);
+
+			// mark main pool as failed as well (the writer)
+			if (fast_switchover) {
+				pool->last_failed_time = get_cached_time();
+				pool->last_connect_failed = true;
+				server->pool->checking_for_new_writer = false;
+			}
 			disconnect_server(server, false, "server conn crashed?");
+		}
 		break;
 	case SBUF_EV_SEND_FAILED:
 		disconnect_client(server->link, false, "unexpected eof");
@@ -783,6 +933,10 @@ bool server_proto(SBuf *sbuf, SBufEvent evtype, struct MBuf *data)
 		break;
 	case SBUF_EV_CONNECT_FAILED:
 		Assert(server->state == SV_LOGIN);
+		if (fast_switchover) {
+			pool->last_failed_time = get_cached_time();
+			server->pool->checking_for_new_writer = false;
+		}
 		disconnect_server(server, false, "connect failed");
 		break;
 	case SBUF_EV_CONNECT_OK:
